Bubble Sort:
    Description: Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.
    Time Complexity: O(n^2)
    Space Complexity: O(1)
    Characteristics:
    Easy to understand and implement.
    Inefficient for large datasets.
    Stable sort (maintains the relative order of equal elements).
Insertion Sort
    Description: Insertion Sort builds the sorted array one element at a time. It takes each element from the unsorted portion and inserts it into the correct position in the sorted portion.
    Time Complexity: O(n^2)
    Space Complexity: O(1)
    Characteristics:
    Simple implementation.
    Efficient for small datasets or nearly sorted data.
    Stable sort.
Quick Sort
    Description: Quick Sort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.
    Time Complexity: O(n log n) on average, O(n^2) in the worst case.
    Space Complexity: O(log n) (due to recursion stack space)
    Characteristics:
    Very efficient for large datasets.
    Unstable sort (does not maintain the relative order of equal elements).
    The choice of pivot greatly affects performance.
Merge Sort
    Description: Merge Sort is also a divide-and-conquer algorithm. It divides the array into two halves, recursively sorts each half, and then merges the sorted halves to produce the sorted array.
    Time Complexity: O(n log n)
    Space Complexity: O(n) (due to additional array used for merging)
    Characteristics:
    Consistently efficient (always O(n log n) time complexity).
    Stable sort.
    Requires additional space for merging, which may be a disadvantage for large datasets.